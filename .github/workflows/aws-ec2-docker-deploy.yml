name: Deploy to AWS EC2 and Docker

on:
  workflow_call:
    secrets:
      AWS_DEPLOY_ACCESS_KEY_ID:
        required: true
      AWS_DEPLOY_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      AWS_EC2_INSTANCE_ID:
        required: true
      DOCKER_IMAGE_NAME:
        required: true
        description: "Docker image name including registry. Format: <registry>/<app>:<tag>"
      DOCKER_RUN_PARAMS:
        required: false
        description: "Docker flags. For example env variables: '-e PORT=80'"
      SSH_KEY:
        required: true
      SSH_USER:
        required: true
jobs:
  create-docker-container-in-ec2:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: AWS login
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_DEPLOY_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEPLOY_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Set EC2 Public IP environment variable
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids ${{secrets.AWS_EC2_INSTANCE_ID}} --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
      - name: Run docker container
        run: |
          echo "${{secrets.SSH_KEY}}" > private-key
          sudo chmod 600 private-key
          ssh -o StrictHostKeyChecking=no -i private-key ${{secrets.SSH_USER}}@$PUBLIC_IP '

          docker stop app
          docker image prune -a -f
          docker run --name app --rm -d '${{secrets.DOCKER_RUN_PARAMS}}' '${{secrets.DOCKER_IMAGE_NAME}}'
          docker image prune -a -f

          DOCKER_CONFIG_FILE=/home/'${{secrets.SSH_USER}}'/.docker/config.json
          if test -f "$DOCKER_CONFIG_FILE"; then
          rm $DOCKER_CONFIG_FILE
          fi

          exit
          '

